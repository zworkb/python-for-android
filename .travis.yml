sudo: required

dist: xenial  # needed for more recent python 3 and python3-venv

language: generic

stages:
  - lint
  - test

services:
  - docker

before_install:
  # https://github.com/travis-ci/travis-ci/issues/6069#issuecomment-266546552
  - git remote set-branches --add origin develop
  - git fetch

env:
  global:
    - ANDROID_SDK_HOME=/opt/android/android-sdk
    - ANDROID_NDK_HOME=/opt/android/android-ndk

jobs:
  include:
    - &linting
      stage: lint
      language: python
      python: 3.7
      before_script:
        # We need to escape virtualenv for `test_pythonpackage_basic.test_virtualenv`
        #   See also: https://github.com/travis-ci/travis-ci/issues/8589
        - type -t deactivate && deactivate || true
        - export PATH=/opt/python/3.7/bin:$PATH
        # Install tox & virtualenv
        #   Note: venv/virtualenv are both used by tests/test_pythonpackage.py
        - pip3.7 install -U virtualenv
        - pip3.7 install tox>=2.0
        # Install coveralls & dependencies
        #   Note: pyOpenSSL needed to send the coveralls reports
        - pip3.7 install pyOpenSSL
        - pip3.7 install coveralls
      script:
        # we want to fail fast on tox errors without having to `docker build` first
        - tox -- tests/ --ignore tests/test_pythonpackage.py
        # (we ignore test_pythonpackage.py since these run way too long!!
        #  test_pythonpackage_basic.py will still be run.)
      name: "Tox Pep8"
      env: TOXENV=pep8
    - <<: *linting
      name: "Tox Python 2"
      env: TOXENV=py27
    - <<: *linting
      name: "Tox Python 3 & Coverage"
      env: TOXENV=py3
      after_success:
        - coveralls

    - &testing
      stage: test
      before_script:
        # build docker image
        - docker build --tag=p4a --file Dockerfile.py3 .
        # Run a background process to make sure that travis will not kill our tests in
        # case that the travis log doesn't produce any output for more than 10 minutes
        - while sleep 540; do echo "==== Still running (travis, don't kill me) ===="; done &
      script:
        - docker run -e CI -e TRAVIS_JOB_ID="$TRAVIS_JOB_ID" -e TRAVIS_BRANCH="$TRAVIS_BRANCH" p4a /bin/sh -c "$COMMAND"
      after_script:
        # kill the background process started before run docker
        - kill %1
      name: Python 3 arm64-v8a
      # overrides requirements to skip `peewee` pure python module, see:
      # https://github.com/kivy/python-for-android/issues/1263#issuecomment-390421054
      env: COMMAND='. venv/bin/activate && cd testapps/ && python setup_testapp_python3_sqlite_openssl.py apk --sdk-dir $ANDROID_SDK_HOME --ndk-dir $ANDROID_NDK_HOME --requirements libffi,sdl2,pyjnius,kivy,python3,openssl,requests,sqlite3,setuptools' --arch=arm64-v8a
    - <<: *testing
      name: Python 3 armeabi-v7a
      os: osx
      osx_image: xcode10.2
      before_install:
        - export ANDROID_NDK_HOME=$HOME/android-ndk  # (overrides global env)
        - export ANDROID_SDK_HOME=$HOME/android-sdk  # (overrides global env)
        - ANDROID_NDK_VERSION=17c
        - ANDROID_API_LEVEL=27
        - ANDROID_SDK_BUILD_TOOLS_VERSION=28.0.2
        - ANDROID_SDK_TOOLS_ARCHIVE=sdk-tools-linux-4333796.zip
        - ANDROID_SDK_TOOLS_DL_URL=https://dl.google.com/android/repository/$ANDROID_SDK_TOOLS_ARCHIVE
        - ANDROID_NDK_ARCHIVE=android-ndk-r$ANDROID_NDK_VERSION-darwin-x86_64.zip
        - ANDROID_NDK_DL_URL=https://dl.google.com/android/repository/$ANDROID_NDK_ARCHIVE
        - ANDROID_NDK_HOME_V=$ANDROID_NDK_HOME-r$ANDROID_NDK_VERSION
        # check/install python
        - python --version
        - brew update
        - python3 --version
        # install java 1.8 and set it as default
        - brew tap adoptopenjdk/openjdk
        - brew cask install adoptopenjdk8
        - /usr/libexec/java_home -V
        - export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
        # download/extract android's NDK
        - curl --location --progress-bar --insecure $ANDROID_NDK_DL_URL --output $ANDROID_NDK_ARCHIVE
        - mkdir -p $ANDROID_NDK_HOME_V
        - unzip -q $ANDROID_NDK_ARCHIVE -d $HOME
        - ln -sfn $ANDROID_NDK_HOME_V $ANDROID_NDK_HOME
        - rm -rf $ANDROID_NDK_ARCHIVE
        # download/extract android's SDK
        - curl --location --progress-bar --insecure $ANDROID_SDK_TOOLS_DL_URL --output $ANDROID_SDK_TOOLS_ARCHIVE
        - mkdir -p $ANDROID_SDK_HOME
        - unzip -q $ANDROID_SDK_TOOLS_ARCHIVE -d $ANDROID_SDK_HOME
        - rm -rf $ANDROID_SDK_TOOLS_ARCHIVE
        - ls $HOME
        # Accept android's licenses
        - yes | $ANDROID_SDK_HOME/tools/bin/sdkmanager "build-tools;$ANDROID_SDK_BUILD_TOOLS_VERSION" > /dev/null
        - yes | $ANDROID_SDK_HOME/tools/bin/sdkmanager "platforms;android-$ANDROID_API_LEVEL" > /dev/null
        - pip3 install --upgrade Cython==0.28.6
        - pip3 install -e .
      before_script:
        # overrides `testing` for Mac OS since we don't use docker
        - while sleep 540; do echo "==== Still running (travis, don't kill me) ===="; done &
      script:
        - cd testapps/
        - python3 setup_testapp_python3_sqlite_openssl.py apk --sdk-dir $ANDROID_SDK_HOME --ndk-dir $ANDROID_NDK_HOME --requirements libffi,sdl2,pyjnius,kivy,python3,openssl,requests,sqlite3,setuptools --arch=armeabi-v7a
    - <<: *testing
      name: Python 2 armeabi-v7a (with numpy)
      env: COMMAND='. venv/bin/activate && cd testapps/ && python setup_testapp_python2_sqlite_openssl.py apk --sdk-dir $ANDROID_SDK_HOME --ndk-dir $ANDROID_NDK_HOME --requirements sdl2,pyjnius,kivy,python2,openssl,requests,sqlite3,setuptools,numpy'
    - <<: *testing
      name: Rebuild updated recipes
      env: COMMAND='. venv/bin/activate && ./ci/rebuild_updated_recipes.py'
